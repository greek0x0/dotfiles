#!/bin/bash
check_backup() {
    BACKUP_DIR="$WORKSPACE/system/config"
    BACKUP_FILE="$BACKUP_DIR/zshrc-config"
    BACKUP_TIMESTAMP_FILE="$BACKUP_DIR/.backup_timestamp"
    ZSHRC_PATH="$HOME/.zshrc"

    if [[ ! -f $BACKUP_TIMESTAMP_FILE ]]; then
        echo "no prev backup, starting backup"
        backup_zshrc
    else
        LAST_BACKUP_TIME=$(cat $BACKUP_TIMESTAMP_FILE)
        CURRENT_TIME=$(date +%s)
        TIME_DIFF=$((CURRENT_TIME - LAST_BACKUP_TIME))
        
        if (( TIME_DIFF > 3600 )); then
            echo "[backup[YES]"
            backup_zshrc
        else
		echo "[backup[NO]]"
        fi
    fi
}


cheat() {
  if curl --head --silent --fail "https://cht.sh/$1" >/dev/null; then
    curl "cht.sh/$1"
  elif command -v tldr >/dev/null 2>&1; then
    tldr "$1"
  elif man "$1" >/dev/null 2>&1; then
    man "$1"
  else
    echo "No cheat sheet, tldr, or man page available for '$1'."
  fi
}

crypto(){
	curl rate.sx/$1
}
backup_zshrc() {
    BACKUP_DIR="$WORKSPACE/system/config"
    ZSHRC_PATH="$HOME/.zshrc"
    BACKUP_FILE="$BACKUP_DIR/zshrc-config"
    BACKUP_TIMESTAMP_FILE="$BACKUP_DIR/.backup_timestamp"

    if [[ -f $ZSHRC_PATH ]]; then
        cp $ZSHRC_PATH $BACKUP_FILE
        if [[ $? -eq 0 ]]; then
            echo $(date +%s) > $BACKUP_TIMESTAMP_FILE
            echo "backup completed @ $(date)."
        else
            echo "failed to backup .zshrc."
        fi
    else
        echo "error :  $ZSHRC_PATH isnt a path."
    fi
}

rf() {
  if [ ! -f "$1" ]; then
    echo "file not found: $1"
    return 1
  fi
  echo "you are about to delete the following file:"
  echo "$1"
  echo "you really sure about that ?, about to run shred -uzvn3 $1"
  echo "type 'bye bye' to confirm this:"
  read confirmation
  if [ "$confirmation" = "bye bye" ]; then
    echo "deleting file..."
    shred -uzvn3 "$1"
    echo "file deleted: $1"
  else
    echo "sorry you dont pass the vibe test"
  fi
}

unalias ls 2>/dev/null

ls() {
  if [[ "$PWD" == "$HOME" ]]; then
    eza --icons
  elif [[ "$PWD" == "$WORKSPACE/configs" ]]; then
    eza -a --icons
  else
    command ls "$@"
  fi
}

pip3() {
  command pip3 "$@" --break-system-packages
}
repo_clone(){
command git clone git@github.com:greek0x0/"$@"
}

fuck() {
    last_command=$(fc -ln -1)

    if [ -n "$last_command" ]; then
        eval "sudo $last_command"
    else
        echo "sorry bro, it's on you now."
    fi
}

extract() {
  if [ -z "$1" ]; then
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.tar.xz)    tar xvJf $1    ;;
        *.lzma)      unlzma $1      ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x -ad $1 ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *.xz)        unxz $1        ;;
        *.exe)       cabextract $1  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}

boot_kali(){
	cd $WORKSPACE/system/environments/kali; docker-compose up -d; cd -
}
